#include "mainwindow.h"
#include <QFileDialog>
#include "ui_mainwindow.h"
#include <QImage>
#include <QMessageBox>
#include <QGuiApplication>
#include <QFileInfo>
#include "byteswap.h"


QImage double_image(QImage image);

bool ImportS16Frames(QImage & image, FILE * file, uint32_t RGBformat, int width, int height, int length, int img_width, int img_height)
{
	if(RGBformat > 1
	|| width*height != length)
	{
		QMessageBox::information(0L, QGuiApplication::applicationDisplayName(),
                                 QObject::tr("The given file's header does not match one of the creatures formats."));
		return false;
	}

	image = QImage((width*img_width + 255) & 0xFFF0, (height*img_height + 255) & 0xFFF0, QImage::Format_ARGB32);
	image.fill(0);

	PACK(struct, image_header)
	{
		uint32_t offset;
		uint16_t width;
		uint16_t height;
	};
	UNPACK

	std::vector<image_header> headers(length);
	fread(headers.data(), sizeof(image_header), length, file);

	for(int i = 0; i < length; ++i)
	{
		headers[i].offset = byte_swap(headers[i].offset);
		headers[i].width = byte_swap(headers[i].width);
		headers[i].height = byte_swap(headers[i].height);

		if(img_width == 128 && img_height == 128)
		{
			headers[i].offset += 4;
		}

		if(headers[i].width  != img_width
		|| headers[i].height != img_height)
		{
			QMessageBox::information(0L, QGuiApplication::applicationDisplayName(), QObject::tr("The given file is corrupted."));
			return false;
		}

		fseek(file, headers[i].offset, SEEK_SET);

		for(int y = 0; y < headers[i].height; ++y)
		{
			for(int x = 0; x < headers[i].width; ++x)
			{
				uint16_t pixel;
				fread(&pixel, 2, 1, file);
				pixel = byte_swap(pixel);

				QRgb color;

				if(RGBformat)
				{
					color = 0xFF000000
						| ((pixel & 0xF800) << 8)
						| ((pixel & 0x07E0) << 5)
						| ((pixel & 0x001F) << 3);
				}
				else
				{
					color = 0xFF000000
						| ((pixel & 0x7C00) << 9)
						| ((pixel & 0x03E0) << 6)
						| ((pixel & 0x001F) << 3);
				}

				if(img_width == 128 && img_height == 128)
				{
					image.setPixel((i / height)*128 + x, (i % height)*128 + y, color);
				}
				else
				{
					image.setPixel((i / 16)*144 + x, (i % 16)*150 + y, color);
				}
			}
		}
	}

//	image = std::move(double_image(image));

	return true;
}

bool importS16(QImage & image, const char * filename)
{
	FILE * file = fopen(filename, "rb");

	if(!file)
	{
		QMessageBox::information(0L, QGuiApplication::applicationDisplayName(),
                                 QObject::tr("Cannot open file '%1' for reading." )
                                 .arg(filename));
		return false;
	}

	uint32_t RGBformat;
	uint16_t length;

	fread(&RGBformat, 4, 1, file);
	fread(&length, 2, 1, file);

	RGBformat = byte_swap(RGBformat);
	length = byte_swap(length);

	bool r = ImportS16Frames(image, file, RGBformat, 58, 16, length, 144, 150);
	fclose(file);
	return r;
}

bool importBlk(QImage & image, const char * filename)
{
	FILE * file = fopen(filename, "rb");

	if(!file)
	{
		QMessageBox::information(0L, QGuiApplication::applicationDisplayName(),
                                QObject::tr("Cannot open file '%1' for reading." )
                                 .arg(filename));
		return false;
	}

	uint32_t RGBformat;
	uint16_t width, height, length;

	fread(&RGBformat, 4, 1, file);
	fread(&width, 2, 1, file);
	fread(&height, 2, 1, file);
	fread(&length, 2, 1, file);

	RGBformat = byte_swap(RGBformat);
	width = byte_swap(width);
	height = byte_swap(height);
	length = byte_swap(length);

	bool r = ImportS16Frames(image, file, RGBformat, width, height, length, 128, 128);
	fclose(file);
	return r;
}

bool importSpr(QImage & image, const char * filename)
{
const static uint8_t PALETTE_DTA[] = {
	0x00,0x00,0x00, 0x3F,0x3F,0x3F, 0x3F,0x3F,0x3F, 0x3F,0x3F,0x3F, 0x3F,0x3F,0x3F, 0x3F,0x3F,0x3F,
	0x3F,0x3F,0x3F, 0x3F,0x3F,0x3F, 0x3F,0x3F,0x3F, 0x3F,0x3F,0x3F, 0x3F,0x3F,0x3F, 0x04,0x02,0x02,
	0x05,0x06,0x0A, 0x06,0x0A,0x04, 0x06,0x09,0x0C, 0x0B,0x04,0x02, 0x0A,0x06,0x09, 0x0D,0x0A,0x04,
	0x0C,0x0B,0x0C, 0x06,0x07,0x11, 0x05,0x0D,0x15, 0x06,0x0F,0x18, 0x09,0x07,0x11, 0x0B,0x0D,0x12,
	0x0B,0x0E,0x1A, 0x07,0x10,0x07, 0x07,0x10,0x0A, 0x0D,0x12,0x06, 0x0D,0x12,0x0B, 0x0F,0x18,0x06,
	0x0F,0x18,0x0A, 0x06,0x10,0x17, 0x07,0x10,0x19, 0x0D,0x11,0x14, 0x0B,0x13,0x1A, 0x0E,0x18,0x13,
	0x0F,0x18,0x1C, 0x12,0x06,0x02, 0x12,0x07,0x09, 0x14,0x0B,0x04, 0x12,0x0D,0x0B, 0x1A,0x06,0x03,
	0x1B,0x07,0x09, 0x1B,0x0C,0x04, 0x1A,0x0D,0x09, 0x12,0x0E,0x12, 0x12,0x0E,0x1A, 0x1A,0x0D,0x12,
	0x1D,0x0D,0x1A, 0x14,0x12,0x05, 0x14,0x12,0x0C, 0x14,0x19,0x06, 0x13,0x1A,0x0B, 0x1C,0x12,0x05,
	0x1B,0x13,0x0B, 0x1C,0x19,0x05, 0x1D,0x19,0x0C, 0x13,0x13,0x13, 0x13,0x15,0x1B, 0x15,0x19,0x14,
	0x15,0x19,0x1C, 0x1A,0x15,0x13, 0x1A,0x16,0x1A, 0x1C,0x1A,0x14, 0x1B,0x1B,0x1B, 0x0C,0x0F,0x21,
	0x0E,0x17,0x24, 0x10,0x0F,0x21, 0x13,0x16,0x23, 0x12,0x16,0x2C, 0x14,0x1A,0x23, 0x12,0x1B,0x2B,
	0x19,0x16,0x22, 0x19,0x17,0x2B, 0x1B,0x1C,0x23, 0x1B,0x1D,0x2A, 0x13,0x17,0x31, 0x14,0x1D,0x32,
	0x17,0x1C,0x3B, 0x1A,0x1E,0x33, 0x19,0x1E,0x3D, 0x1A,0x23,0x0D, 0x17,0x21,0x13, 0x17,0x20,0x1A,
	0x1B,0x23,0x13, 0x1D,0x22,0x1C, 0x1E,0x29,0x13, 0x1E,0x29,0x1A, 0x16,0x20,0x23, 0x17,0x20,0x2E,
	0x1C,0x21,0x25, 0x1D,0x22,0x2B, 0x1F,0x29,0x23, 0x1E,0x29,0x2C, 0x16,0x21,0x33, 0x16,0x24,0x39,
	0x16,0x29,0x3C, 0x1C,0x22,0x33, 0x1D,0x22,0x3F, 0x1E,0x28,0x36, 0x1C,0x29,0x3B, 0x23,0x06,0x04,
	0x24,0x07,0x09, 0x22,0x0D,0x04, 0x23,0x0D,0x0A, 0x2B,0x06,0x04, 0x2B,0x07,0x08, 0x2A,0x0C,0x04,
	0x2B,0x0C,0x0A, 0x26,0x0D,0x12, 0x23,0x13,0x05, 0x23,0x14,0x0A, 0x24,0x1A,0x05, 0x24,0x1A,0x0C,
	0x2B,0x14,0x05, 0x2A,0x15,0x0A, 0x2C,0x1A,0x05, 0x2B,0x1B,0x0B, 0x22,0x15,0x12, 0x22,0x16,0x1B,
	0x23,0x1B,0x13, 0x22,0x1D,0x1B, 0x2B,0x14,0x12, 0x2C,0x15,0x19, 0x2A,0x1D,0x12, 0x2B,0x1D,0x1A,
	0x34,0x0B,0x07, 0x35,0x0D,0x12, 0x32,0x15,0x05, 0x32,0x15,0x0A, 0x33,0x1A,0x05, 0x33,0x1C,0x0B,
	0x3A,0x14,0x05, 0x3A,0x14,0x0B, 0x3A,0x1D,0x05, 0x3A,0x1D,0x0A, 0x33,0x14,0x12, 0x33,0x15,0x19,
	0x33,0x1D,0x12, 0x32,0x1D,0x1A, 0x3A,0x14,0x14, 0x3B,0x16,0x18, 0x3C,0x1C,0x12, 0x3B,0x1C,0x1C,
	0x24,0x0F,0x21, 0x23,0x14,0x21, 0x21,0x1E,0x24, 0x21,0x1E,0x2A, 0x2A,0x1E,0x22, 0x29,0x1F,0x29,
	0x20,0x1F,0x31, 0x34,0x0C,0x20, 0x36,0x1C,0x22, 0x3B,0x1D,0x33, 0x29,0x22,0x0B, 0x25,0x21,0x14,
	0x24,0x22,0x1C, 0x22,0x2B,0x14, 0x23,0x2B,0x1B, 0x2C,0x22,0x14, 0x2B,0x23,0x1B, 0x2D,0x29,0x14,
	0x2D,0x2A,0x1C, 0x27,0x31,0x0F, 0x29,0x34,0x17, 0x34,0x22,0x06, 0x34,0x22,0x0C, 0x35,0x2A,0x05,
	0x34,0x2A,0x0B, 0x3C,0x23,0x05, 0x3B,0x23,0x0B, 0x3D,0x2B,0x05, 0x3D,0x2B,0x0C, 0x33,0x23,0x13,
	0x32,0x25,0x1A, 0x34,0x2A,0x14, 0x34,0x2A,0x1C, 0x3B,0x24,0x12, 0x3B,0x24,0x19, 0x3C,0x2B,0x13,
	0x3B,0x2C,0x1B, 0x34,0x31,0x0E, 0x3D,0x33,0x03, 0x3E,0x33,0x0C, 0x3F,0x3C,0x03, 0x3F,0x3B,0x0B,
	0x35,0x31,0x14, 0x35,0x31,0x1C, 0x32,0x3D,0x14, 0x33,0x3D,0x1B, 0x3E,0x32,0x13, 0x3D,0x33,0x1B,
	0x3E,0x3B,0x13, 0x3F,0x3A,0x1C, 0x23,0x22,0x24, 0x23,0x24,0x2B, 0x24,0x2A,0x24, 0x25,0x2A,0x2D,
	0x2A,0x24,0x23, 0x29,0x26,0x2C, 0x2C,0x2A,0x24, 0x2B,0x2A,0x2D, 0x22,0x25,0x33, 0x21,0x26,0x3E,
	0x25,0x29,0x34, 0x24,0x2A,0x3F, 0x28,0x27,0x31, 0x2B,0x2B,0x33, 0x29,0x2E,0x3D, 0x2A,0x32,0x2A,
	0x26,0x31,0x31, 0x2C,0x30,0x34, 0x2A,0x31,0x3F, 0x2C,0x3A,0x31, 0x2E,0x39,0x3A, 0x33,0x24,0x24,
	0x32,0x26,0x29, 0x33,0x2C,0x23, 0x32,0x2C,0x2C, 0x3B,0x24,0x23, 0x3B,0x24,0x29, 0x3A,0x2D,0x22,
	0x3A,0x2D,0x2A, 0x31,0x2E,0x32, 0x31,0x2F,0x38, 0x3D,0x2B,0x33, 0x35,0x32,0x24, 0x34,0x32,0x2C,
	0x33,0x3C,0x22, 0x33,0x39,0x2C, 0x3C,0x33,0x24, 0x3B,0x34,0x2B, 0x3E,0x3A,0x24, 0x3E,0x3B,0x2C,
	0x35,0x32,0x33, 0x32,0x32,0x3A, 0x35,0x39,0x33, 0x36,0x3A,0x39, 0x39,0x35,0x34, 0x38,0x34,0x38,
	0x3C,0x3A,0x34, 0x3D,0x3D,0x3B, 0x3F,0x3F,0x3F, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
	0x3F,0x3F,0x3F, 0x3F,0x3F,0x3F, 0x3F,0x3F,0x3F, 0x3F,0x3F,0x3F, 0x3F,0x3F,0x3F, 0x3F,0x3F,0x3F,
	0x3F,0x3F,0x3F, 0x3F,0x3F,0x3F, 0x3F,0x3F,0x3F, 0x3F,0x3F,0x3F };

	FILE * file = fopen(filename, "rb");

	if(!file)
	{
		QMessageBox::information(0L, QGuiApplication::applicationDisplayName(),
                                 QObject::tr("Cannot open file '%1' for reading." )
                                 .arg(filename));
		return false;
	}

	uint16_t length;
	fread(&length, 2, 1, file);
	length = byte_swap(length);

	if(length != 58*8)
	{
		QMessageBox::information(0L, QGuiApplication::applicationDisplayName(),
                                 QObject::tr("The given file's header does not match one of the creatures formats."));
		fclose(file);
		return false;
	}

	PACK(struct, spr_header)
	{
		spr_header() :
			offset(0),
			width(0),
			height(0)
		{
		}

		void read(FILE * file)
		{
			fread(&offset, 4, 1, file);
			fread(&width, 2, 1, file);
			fread(&height, 2, 1, file);

			offset = byte_swap(offset);
			width = byte_swap(width);
			height = byte_swap(height);
		}

		uint32_t offset;
		uint16_t width, height;
	};
	UNPACK

	std::vector<spr_header> header(length);

	for(uint16_t i = 0; i < length; ++i)
	{
		header[i].read(file);
	}

	image = QImage((58*144 + 255) & 0xFFF0, (8*150 + 255) & 0xFFF0, QImage::Format_ARGB32);
	image.fill(0);

	for(uint16_t i = 0; i < length; ++i)
	{
		fseek(file, header[i].offset, SEEK_SET);

		for(int y = 0; y < header[i].height; ++y)
		{
			for(int x = 0; x < header[i].width; ++x)
			{
				uint8_t value;
				fread(&value, 1, 1, file);

				int red   = PALETTE_DTA[value*3] << 2;
				int green = PALETTE_DTA[value*3 + 1] << 2;
				int blue  = PALETTE_DTA[value*3 + 2] << 2;

				QRgb color = (red << 16) | (green << 8) | blue;

				image.setPixel((i / 8)*header[i].width + x, (i % 8) * header[i].height + y, 0xFF000000 | color);
			}
		}
	}

//	image = std::move(double_image(image));

	fclose(file);
	return true;
}

void MainWindow::documentImportSpr()
{
	if(!dimensionCheck(QSize((58*144), (8*150))))
	{
		return;
	}

	QString name;
	do {
		name = QFileDialog::getOpenFileName(this, tr("Open Creatures 1 Background"), QString(), tr("Creatures Sprite (*.spr)"));

		if(name.isEmpty())
		{
			return;
		}
	} while(!importSpr(background[0][0], name.toStdString().c_str()));

	if(dimensions == QSize(-1, -1))
	{
		filename = QFileInfo(name).fileName();
		dimensions = QSize((58*144), (8*150));
		fluids.clear();
		fluids.resize(totalTiles());
	}

	ui->widget->repaint();
}

void MainWindow::documentImportS16()
{
	if(!dimensionCheck(QSize(58*144*2, 16*150*2)))
	{
		return;
	}

	QString name;
	do {
		name = QFileDialog::getOpenFileName(this, tr("Open Creatures 2 Background"), QString(), tr("Creatures 2 Sprite (*.s16)"));

		if(name.isEmpty())
		{
			return;
		}
	} while(!importS16(background[0][0], name.toStdString().c_str()));

	if(dimensions == QSize(-1, -1))
	{
		filename = QFileInfo(name).fileName();
		dimensions = QSize(58*144, 16*150);
		fluids.clear();
		fluids.resize(totalTiles());
	}

	ui->widget->repaint();
}

void MainWindow::documentImportBlk()
{
	do {
		QString name = QFileDialog::getOpenFileName(this, tr("Open c2e Background"), QString(), tr("c2e background (*.blk)"));

		if(name.isEmpty())
		{
			return;
		}

		QImage image;
		if(!importBlk(image, name.toStdString().c_str()))
		{
			continue;
		}

		int width = 0; int height = 0;

		for(auto y = 0; y < image.height(); ++y)
		{
			for(auto x = width; x < image.width(); ++x)
			{
				if((image.pixel(x, y) & 0x00FFFFFF) != 0)
				{
					width = x;
					height = y;
				}
			}
		}

		if(dimensionCheck(QSize(width, height)))
		{
			background[0][0] = std::move(image);

			if(dimensions == QSize(-1, -1))
			{
				filename = QFileInfo(name).fileName();
				dimensions = QSize(width, height);
				rooms.clear();
				rooms.resize(totalTiles());
				fluids.clear();
				fluids.resize(totalTiles());
			}

			ui->widget->repaint();
			return;
		}
	} while(true);
}
